// Code generated at by github.com/albuquerq/servermock DO NOT EDIT.
package {{ .Package }}

import (
	"net/http"
	"net/http/httptest"

	"github.com/go-chi/chi/v5"
)

type {{ .TypeName }} struct {
	*httptest.Server
	// handlers.

{{- range $handler := .Data.Handlers }}
	{{ $handler.Name }} {{ if $.UseStackHandler }}*StackHandler{{ else }}http.HandlerFunc{{ end }} // [{{ $handler.Method }}] {{ $handler.Path }}
{{- end }}
}

func New{{ .TypeName }}() *{{ .TypeName }} {
	srv := &{{ .TypeName }}{
		// handlers.
{{- range $handler := .Data.Handlers }}
	{{- with index $handler.Responses 0}}
		{{ $handler.Name }}: {{ if $.UseStackHandler}} NewStackHandler({{ $handler.Name}}{{.Name}}){{ else }}{{ $handler.Name }}{{ .Name }}{{ end }},
	{{- end }}
{{- end }}
	}
	srv.initialize()
	return srv
}

func (fs *{{ .TypeName }}) initialize() {
	router := chi.NewRouter()
{{ range $handler := .Data.Handlers }}
	{{- with index $handler.Responses 0}}
		{{- if $.UseStackHandler }}
	router.Method("{{ $handler.Method}}", "{{ $handler.Path }}", fs.{{ $handler.Name }})
		{{- else }}
	router.Method("{{ $handler.Method}}", "{{ $handler.Path }}", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fs.{{ $handler.Name }}(w, r)
		fs.{{ $handler.Name }} = {{ $handler.Name }}{{ .Name }}
	}))
		{{- end }}
	{{- end }}
{{- end }}

	fs.Server = httptest.NewServer(router)
}

func sendResponse(w http.ResponseWriter, payload string, statusCode int) { //nolint
	w.WriteHeader(statusCode)
	_, _ = w.Write([]byte(payload))
}

{{ if .UseStackHandler }}
type StackHandler struct {
	pool []http.HandlerFunc
	base http.HandlerFunc
}

func NewStackHandler(base http.HandlerFunc) *StackHandler {
	if base == nil {
		base = func(http.ResponseWriter, *http.Request) {}
	}
	return &StackHandler{
		base: base,
	}
}

func (hp *StackHandler) pop() http.HandlerFunc {
	if hp == nil {
		hp = newEmpty()
	}

	if len(hp.pool) == 0 {
		return hp.base
	}
	idx := len(hp.pool) - 1

	h := hp.pool[idx]
	hp.pool = hp.pool[:idx]

	return h
}

func (hp *StackHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if hp == nil {
		hp = newEmpty()
	}
	hp.pop().ServeHTTP(w, r)
}

func (hp *StackHandler) Push(h http.HandlerFunc) {
	if h == nil {
		return
	}
	if hp == nil {
		hp = newEmpty()
	}
	hp.pool = append(hp.pool, h)
}

func (hp *StackHandler) Reset() {
	if hp == nil {
		hp = newEmpty()
	}
	hp.pool = []http.HandlerFunc{}
}

func newEmpty() *StackHandler {
	return &StackHandler{
		base: func(http.ResponseWriter, *http.Request) {},
	}
}
{{- end }}
